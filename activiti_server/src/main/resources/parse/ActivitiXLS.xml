<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL"
	xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
	xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"
	xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:activiti="http://activiti.org/bpmn"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<xsl:variable name="delimiters">
		,."!?()
	</xsl:variable>

	<xsl:template name="makeNodeDataWithoutAttribute">
		<xsl:param name="nodes" />
		<xsl:copy-of select="bpmn:documentation" />
	</xsl:template>
	<!-- camunda:class -->

	<xsl:template name="makeNodeData">
		<xsl:param name="nodes" />

		<xsl:if test="@camunda:class">
			<xsl:attribute name="activiti:class">
				<xsl:value-of select="@camunda:class" />
			</xsl:attribute>
		</xsl:if>

		<xsl:copy-of select="@*[not(name() = 'camunda:class')]  | bpmn:documentation" />
	</xsl:template>



	<xsl:template name="makeExtensionElements">
		<xsl:param name="nodes" />

		<xsl:copy-of select="@*" />
		<xsl:for-each select="node()">
			<xsl:if test="name() = 'bpmn:extensionElements'">
				<extensionElements>
					<xsl:for-each select="camunda:formData/node()">
						<xsl:if test="name() = 'camunda:formField'">
							<xsl:element name="activiti:formProperty">
								<!-- Rename the attribute name (defaultValue & label) -->
								<!-- When enum miss the value ? -->
								<xsl:attribute name="name">
									<xsl:value-of select="@label" />
								</xsl:attribute>
								<xsl:if test="@defaultValue !=''">
									<xsl:attribute name="default">
										<xsl:value-of select="@defaultValue" />
									</xsl:attribute>
								</xsl:if>
								<xsl:copy-of
									select="@*[not(name() = 'defaultValue') and not(name() = 'label')] | node()" />
							</xsl:element>
						</xsl:if>
					</xsl:for-each>


					<!-- TODO -->
					<xsl:for-each select="node()">
						<xsl:if test="name() = 'camunda:taskListener'">
							<activiti:taskListener>
								<xsl:copy-of select="@*"></xsl:copy-of>
							</activiti:taskListener>
						</xsl:if>
					</xsl:for-each>

					<!-- <activiti:taskListener> <xsl:copy-of select="@* | camunda:taskListener" 
						/> </activiti:taskListener> -->



					<xsl:for-each select="camunda:properties/node()">
						<xsl:if test="name() = 'camunda:property'">
							<xsl:element name="activiti:field">
								<!-- Rename the attribute name (defaultValue & label) -->
								<!-- When enum miss the value ? -->
								<xsl:attribute name="name">
										<xsl:value-of select="@label" />
								</xsl:attribute>
								<xsl:if test="@value !=''">
									<xsl:attribute name="stringValue">
										<xsl:value-of select="@value" />
									</xsl:attribute>
								</xsl:if>
								<xsl:copy-of
									select="@*[not(name() = 'value') and not(name() = 'label')] | node()" />
							</xsl:element>
						</xsl:if>
					</xsl:for-each>
				</extensionElements>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>

	<xsl:template match="bpmn:definitions">

		<definitions targetNamespace="http://activiti.org/bpmn20">
			<xsl:copy-of select="@*[not(name() = 'targetNamespace')]" />

			<xsl:for-each select="bpmn:process">
				<process>
					<xsl:copy-of select="@*" />
					<xsl:for-each select="node()">

						<!-- EVENT -->
						<xsl:if test="name() = 'bpmn:startEvent'">

							<startEvent>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>

								<xsl:call-template name="makeExtensionElements">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>

								<xsl:copy-of select="@* | bpmn:conditionalEventDefinition" />
								<xsl:copy-of select="@* | bpmn:timerEventDefinition" />
								<xsl:copy-of select="@* | bpmn:messageEventDefinition" />
								<xsl:copy-of select="@* | bpmn:signalEventDefinition" />
							</startEvent>
						</xsl:if>

						<xsl:if test="name() = 'bpmn:endEvent'">
							<endEvent>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>

								<xsl:copy-of select="@* | bpmn:messageEventDefinition" />
								<xsl:copy-of select="@* | bpmn:escalationEventDefinition" />
								<xsl:copy-of select="@* | bpmn:errorEventDefinition" />
								<!-- <xsl:copy-of select="@* | bpmn:cancelEventDefinition" /> [EXPERIMENTAL] -->
								<xsl:copy-of select="@* | bpmn:compensateEventDefinition" />
								<xsl:copy-of select="@* | bpmn:signalEventDefinition" />
								<xsl:copy-of select="@* | bpmn:terminateEventDefinition" />
							</endEvent>
						</xsl:if>


						<!-- Is parsed, but gonna be hard to manage activiti side -->
						<xsl:if test="name() = 'bpmn:intermediateThrowEvent'">
							<intermediateThrowEvent>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>

								<!-- <xsl:copy-of select="@* | bpmn:compensateEventDefinition" /> 
									[EXPERIMENTAL] -->
								<xsl:copy-of select="@* | bpmn:signalEventDefinition" />
								<xsl:copy-of select="@* | bpmn:extensionElements" />
							</intermediateThrowEvent>
						</xsl:if>


						<!-- FLOW -->
						<xsl:if test="name() = 'bpmn:sequenceFlow'">
							<sequenceFlow>
								<xsl:copy-of select="@* | bpmn:conditionExpression" />
							</sequenceFlow>
						</xsl:if>



						<!-- GATEWAY -->
						<!-- Gateway not define (eventBasedGateway) -->

						<xsl:if test="name() = 'bpmn:exclusiveGateway'">
							<exclusiveGateway>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>
							</exclusiveGateway>
						</xsl:if>

						<xsl:if test="name() = 'bpmn:parallelGateway'">
							<parallelGateway>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>
							</parallelGateway>
						</xsl:if>

						<xsl:if test="name() = 'bpmn:inclusiveGateway'">
							<inclusiveGateway>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>
							</inclusiveGateway>
						</xsl:if>

						<!-- TASK -->
						<!-- Task not define (sendTask, scriptTask, callActivity, subProcess) -->
						<!-- [EXPERIMENTAL] businessRuleTask -->

						<xsl:if test="name() = 'bpmn:task'">
							<task>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>
							</task>
						</xsl:if>

						<xsl:if test="name() = 'bpmn:manualTask'">
							<manualTask>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>
							</manualTask>
						</xsl:if>

						<xsl:if test="name() = 'bpmn:receiveTask'">
							<receiveTask>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>
							</receiveTask>
						</xsl:if>

						<xsl:if test="name() = 'bpmn:serviceTask'">
							<serviceTask>
								<xsl:call-template name="makeNodeData">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>

								<xsl:call-template name="makeExtensionElements">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>
							</serviceTask>
						</xsl:if>

						<xsl:if test="name() = 'bpmn:userTask'">
							<userTask>
								<xsl:copy-of
									select="@*[not(name() = 'camunda:candidateGroups') and not(name() = 'camunda:candidateUsers')]" />

								<xsl:call-template name="makeNodeDataWithoutAttribute">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>

								<xsl:call-template name="makeExtensionElements">
									<xsl:with-param name="nodes" select="node()" />
								</xsl:call-template>


								<xsl:for-each select="@*">
									<xsl:if test="name() = 'camunda:candidateUsers'">
										<humanPerformer>
											<resourceAssignmentExpression>
												<xsl:element name="formalExpression">
													<xsl:value-of select="current()" />
												</xsl:element>
											</resourceAssignmentExpression>
										</humanPerformer>
									</xsl:if>
									<xsl:if test="name() = 'camunda:candidateGroups'">
										<potentialOwner>
											<resourceAssignmentExpression>
												<xsl:element name="formalExpression">
													<xsl:value-of select="current()" />
												</xsl:element>
											</resourceAssignmentExpression>
										</potentialOwner>
									</xsl:if>
								</xsl:for-each>
							</userTask>
						</xsl:if>
					</xsl:for-each>
				</process>
			</xsl:for-each>
		</definitions>
	</xsl:template>

</xsl:stylesheet>